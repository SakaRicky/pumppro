// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// A sale being done. It's for sales made in the shop only. Doesn't conatin fuel
model Sale {
  id           Int          @id @default(autoincrement())
  user         User         @relation(fields: [user_id], references: [id])
  user_id      String
  sale_details SaleDetail[]
  total        Decimal
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt

  @@index([user_id])
}

// For each sold item. It keeps details as price and quantity. total amount can be calculated on the fly.
model SaleDetail {
  id         Int      @id @default(autoincrement())
  sale       Sale     @relation(fields: [sale_id], references: [id], onDelete: Cascade)
  sale_id    Int
  product    Product  @relation(fields: [product_id], references: [id])
  product_id String
  quantity   Int
  unit_price Decimal
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([sale_id])
  @@index([product_id])
}

// Each store product. Might not have description and image
model Product {
  id                  String          @id @default(uuid())
  sale_details        SaleDetail[]
  category            ProductCategory @relation(fields: [category_id], references: [id])
  purchases           Purchase[]
  category_id         String
  name                String          @unique
  description         String?
  image               String?
  quantity            Int
  purchase_price      Decimal
  selling_price       Decimal
  low_stock_threshold Int             @default(10)
  created_at          DateTime        @default(now())
  updated_at          DateTime        @updatedAt
}

// Tracks down product and fuel purchases.
model Purchase {
  id             String   @id @default(uuid())
  product        Product  @relation(fields: [product_id], references: [id])
  product_id     String
  quantity       Int
  purchase_price Decimal // Store price per unit at the time of purchase
  purchase_date  DateTime @default(now()) // Track when the purchase happened
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model ProductCategory {
  id          String    @id @default(uuid())
  products    Product[]
  name        String    @unique
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

// Not all workers use the system
enum UserType {
  SYSTEM_USER
  WORKER
}

// A seller of the shop. Email and password are optional because not all sellers use the system.
// The admin could enter the data in their place.
model User {
  id              String                @id @default(uuid())
  type            UserType              @default(WORKER)
  daily_sales     DailySalesSummary[]
  sales           Sale[]
  fuel_sales      FuelSale[]
  names           String
  date_of_birth   DateTime
  username        String                @unique
  gender          Gender
  phone           String
  salary          Decimal
  godfather_phone String
  localisation    String?
  email           String?
  password_hash   String?
  cni_number      String
  profile_picture String?
  messages        MessageNotification[]
  role            Role                  @default(USER)
  created_at      DateTime              @default(now())
  updated_at      DateTime              @updatedAt
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  USER
  ADMIN
  SALE
  PUMPIST
}

// Used to track how much cash each person hand in compared to the sale they made, hence tracking the differences that may be there
model DailySalesSummary {
  id                 Int      @id @default(autoincrement())
  user               User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id            String
  amount_sold        Decimal
  amount_given       Decimal
  date_of_sale_start DateTime @default(now())
  date_of_sale_stop  DateTime @default(now())
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
}

enum FuelType {
  FUEL
  GASOIL
  PETROL
  GAS_BOTTLE
}

// Could be a product but have it's own section in the shop.
model Fuel {
  id              Int       @id @default(autoincrement())
  name            String
  purchase_price  Decimal
  selling_price   Decimal
  quantity_theory Decimal   @db.Decimal(10, 3)
  quantity_actual Decimal   @db.Decimal(10, 3)
  description     String
  tank            Tank      @relation("FuelTank", fields: [tank_id], references: [id])
  tank_id         Int       @unique
  created_at      DateTime  @default(now())
  updated_at      DateTime? @updatedAt
  fuel_type       FuelType
  pump            Pump[]

  fuel_sales FuelSale[]
}

// Tracks down how much fuel was sold by PUMPIST each day when they hand in the cash money of their 
// daily sale
model FuelSale {
  id            Int      @id @default(autoincrement())
  fuel          Fuel     @relation(fields: [fuel_id], references: [id])
  fuel_id       Int
  user          User     @relation(fields: [user_id], references: [id])
  user_id       String
  start_reading Decimal
  end_reading   Decimal
  quantity_sold Decimal  @default(0) // Auto-calculated as `end_reading - start_reading`
  total_amount  Decimal  @default(0) // Auto-calculated as `quantity_sold * fuel.selling_price`
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

// It contains the fuel and 1 tank can only have 1 fuel.
model Tank {
  id         Int       @id @default(autoincrement())
  fuel       Fuel?     @relation("FuelTank")
  name       String    @unique
  capacity   Int
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt
}

// Used to sell the fuel. Mainly for visual purposes.
model Pump {
  id      Int    @id @default(autoincrement())
  name    String
  fuel    Fuel?  @relation(fields: [fuel_id], references: [id])
  fuel_id Int?
}

// Used to send system notifications to the concerned users
model MessageNotification {
  id         Int      @id @default(autoincrement())
  message    String
  title      String
  read       Boolean  @default(false)
  users      User[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// some expenses link to the business usefull to calculate net profit
model FixedCost {
  id         Int      @id @default(autoincrement())
  name       String // e.g., "Rent", "Electricity", "Security Fees"
  amount     Decimal // Monthly cost amount
  month      Int // 1 = January, 2 = February, ..., 12 = December
  year       Int // e.g., 2024
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([month, year, name]) // Prevents duplicate entries for the same cost in the same month
}
